// Generated by CoffeeScript 1.6.2
(function() {
  var Transit;

  Transit = window.TransitTheme || (window.TransitTheme = {});

  Transit.Views = {};

  Transit.Models = {};

  Transit.Main = {
    init: function() {
      this.mapView = new Transit.Views.MapView({
        el: $('#map')
      });
      return this.extendViews();
    },
    extendViews: function() {
      var _this = this;

      return _.each($('.js-extend-view'), function(el) {
        var $el, v, view, viewName;

        $el = $(el);
        viewName = $el.data('view');
        if (viewName === null || viewName === void 0) {
          return;
        }
        view = Transit.Views[viewName];
        v = new view({
          el: el,
          mapView: _this.mapView
        });
        return $el.removeClass('js-extend-view');
      });
    }
  };

  Transit.Models.PostModel = Backbone.Model.extend({
    markerHTML: function() {
      var html;

      html = "";
      console.log(this.toJSON());
      switch (this.get('type')) {
        case "photo":
        case "photoset":
          html = "<div class=\"photo\" style=\"background-image: url('" + (this.get('photos')[0].src) + "');\"></div>";
      }
      return html;
    }
  });

  Transit.Views.MapView = Backbone.View.extend({
    className: 'map',
    initialize: function() {
      this.posts = new Backbone.Collection();
      this.map = new L.Map("map", {
        center: new L.LatLng(45.5192092, -122.63661690000004),
        zoom: 16
      });
      return this.map.addLayer(new L.StamenTileLayer("toner"));
    },
    addMarker: function(postModel) {
      var icon, marker, options;

      this.posts.add(postModel);
      icon = new L.divIcon({
        className: 'marker',
        iconSize: L.Point(60, 60),
        html: postModel.markerHTML()
      });
      options = {
        icon: icon
      };
      marker = L.marker([postModel.get('position').latitude, postModel.get('position').longitude], options);
      return marker.addTo(this.map);
    },
    showPost: function(index) {
      var post;

      post = this.posts.get(index);
      return this.map.setView(new L.LatLng(post.get('position').latitude, post.get('position').longitude), post.get('position').zoom);
    }
  });

  Transit.Views.PhotosetView = Backbone.View.extend({
    initialize: function() {}
  });

  Transit.Views.PostView = Backbone.View.extend({
    initialize: function() {
      var mapTag,
        _this = this;

      this.model = new Transit.Models.PostModel(this.$el.data());
      _.each(this.$('pre.json'), function(dataEl) {
        return _this.model.set(JSON.parse($(dataEl).html()));
      });
      mapTag = _.find(this.model.get('meta').tags, function(tag) {
        return tag.name.indexOf("lat/long/zoom") === 0;
      });
      if (mapTag != null) {
        this.addMarker(mapTag);
      }
      switch (this.model.get('type')) {
        case 'photoset':
          return this.photosetView = new Transit.Views.PhotosetView({
            el: this.$('.photoset'),
            model: this.model
          });
      }
    },
    addMarker: function(tag) {
      var position;

      tag = tag.name.split(":");
      tag = tag[1].split("/");
      position = {
        latitude: tag[0],
        longitude: tag[1],
        zoom: tag[2]
      };
      this.model.set('position', position);
      return this.options.mapView.addMarker(this.model);
    }
  });

}).call(this);
